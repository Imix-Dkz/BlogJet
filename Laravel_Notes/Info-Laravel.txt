Se agrega el proyecto de curso *Blogjet*, x ahora va en el Cap27
    Del Canal *Coders Free*
      Nombre Curso: *Curso Laravel 10 desde cero*
      Este curso viene de la lista de reproducción:
        https://www.youtube.com/watch?v=Hp0M1SoK2AU&list=PLZ2ovOgdI-kVeYs74jL3kOj-AyoDKCXRy

    Se creo este Laravel-Project para cotinuidad del capítulo:
        27 - Qué es Laravel Jetstream - Curso Laravel 9 desde cero
************************************************************************************************
20240201 - Original Init
20240203 - cl10 > Fin de c20: Que es asignación masiva
20240208 - cl10 > Fin de c26: Como crear un formulario de Contacto, p/Correo
20240209 - cl10 > 27 - Qué es Laravel Jetstream - Curso Laravel 9 desde cero

[ FRAMEWORK - Laraverl, desde el 2011 ]
    Un framework es un marco de trabajo que tiene como objetivo facilitar la solución de problemas que pueden surgir al programar12345. Los frameworks aceleran el proceso de programar facilitando tareas como la organización del código o el trabajo en equipo dentro de un proyecto1. Un framework es un esquema o patrón que nos ofrece un entorno genérico para escribir código en un lenguaje concreto3. Utilizar un framework permite agilizar los procesos de desarrollo ya que evita tener que escribir código de forma repetitiva, asegura unas buenas prácticas y la consistencia del código

	Es un framwork opensource, con la intención de limitar el código spagetti...

	Usar paquietes, pero separar las dependencias de desarrollo vs la dependencias de producción ...

	Patrón de diseño VISTA-CONTROLADOR:
    	[Usuario]
        	1.- Utiliza: [Controlador]
        	2.- Manipula:[Modelo]
        	3.- Notifica: [Controlador]
            	4.-Actualiza:[Vista]
        	5.-Se muestra a:[Usuario]
    
[Crear controaldores(vía GIT-BASH)]:
    php artisan make:controller HomeController

	REAC.php
	Laravel tiene BLADE que es simiarl a RAzor de ASP
-------------------------------
[Create User MySQL]
 	CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';
	[Nota]:
		Los datos de conexión a una BD se pueden hacer en por defecto en el archivo "/config/database.php"
		Pero no es recomendable, ya que si esto se está subiendo a un repositorio, subiria tambien las credenciales de la BD
		Para esto, lo adecuado es ir al archivo ".env" en donde estarán los datos de credeciales, los cuales no son considerados en los archivos que se suben al repositorio de GIT
[ Migraciones/Migrate + factory + seed ]
	Proceso en el cual se realizara un seguimiento del proceso de creación de tablas para el uso de datos, así como su correspondiente proceso de baja de las tablas, con ello seria más facil tener un seguimiento de las tablas que tendrá el proyecto si es que alguien en remoto hace uso de el, si tener que tocar directamente la interfaz de BD...

	# php artisan make:migration [curos]
	Esto crea un script con 2 metodos, una para crear la tabla con las caracteristicas que necesitamos y otro con la posibilida de hacer baja de la misma...
		#  php artisan make:migration create_cursos_table

	[Nota BD MIGRACIONES] :Si se van a actualizar los datos ANTES  de llenar de datos el proyectos, se puede usar ...
		#  php artisan migrate:fresh
			PRIMERO BORRA TODO Y LUEGO EJECUTA LAS MIGRACIONES
		#  php artisan migrate:refresh
			UNO A UNO BORRA UNA MIGRACION LUEGO EJECUTA el UP del metodo
		#  php artisan make:migration add_avatar_to_users_table
			Permite agregar columans a la tabla sin tener que borrarla, hay que personalizarla ...
			Al agregar una migración de update y terminar de editarla
			Se puede ejecutar el cambio en el BD con el siguiete comando
				#  php artisan migrate
		
		# En caso de que se requiera revertir SÓLO UNA de las migraciones...
			$ php artisan migrate:rollback --path=database/migrations/2024_02_27_201021_create_posts_table.php

	Para actualizar atributos de una tabla hay que agregar una libreria previa...
		# composer require doctorine/dbal

	Si se desean agregar columnas en un proeycto en activo ...
**************************************
[Nota 2]: Se pueden hacer "checkout" de archivos y recuperar su estado de edición en el tiempo...
	git checkout [NAME-FILE]

[Usando TINKER]
	Para poder hacer conexión de la BD con Laravel de forma autoamtica lo ideal es usar modelos, 
		$ php artisan tinker
		[Dentro de tinker] : el comportamiento es diferente...
			> use App\Models\Curso;
			> $curso = new Curso;                                                                        
			> $curso->name = 'Laravel3'; 
			> $curso->description = 'Un framework chido de php3';                                                                                                              
			> $curso->save();

	Si es necesario crear muchos registros iniciales(seeders) lo correcto es crear un factory...
		$ php artisan make:factory CursoFactory
	Si ya se tienen seeders/DatabaseSeeder.php creados, se ejecutan así:
		$ php artisan migrate:fresh --seed

	---------------------------------------------------
	Para hacer consultas, hay que realizar consultas usando tinker(Ejemplos):...
	> use App\Models\Curso;
	> $cursos = Curso::all(); //para obtener todos los datos
	> $cursos = Curso::where('categoria','Diseño web')->orderBy('id', 'desc')->get(); //Filtrado de datos x categoria y ordenados 'asc'/'desc'
	> $cursos = Curso::select('name', 'descripcion')->where('categoria','Diseño web')->orderBy('id', 'desc')->first();
	> $cursos = Curso::select('name', 'descripcion')->where('categoria','Diseño web')->orderBy('id', 'desc')->get();
	//->limit(#) ó ->take(#), es indistinto, take es ALIAS limit...
	> $cursos = Curso::select('id','name as title', 'descripcion')->where('categoria','Diseño web')->orderBy('id', 'as
	c')->limit(2)->get();
	//En caso del where se puede usar tambien el find...
	> $curso = Curso::find(5);

	//Tambien se pueden hacer consultas condicionales...
	> $curso = Curso::where('id','>','47')->get();
	> $curso = Curso::select('id', 'name as title', 'categoria')->where('descripcion','like','%corporis%')->get();
//Ya asiganados los datos, se procede a realizar obtención de datos...
***[ Acceso a la info ]*********************************************************************
	Para hacer un acceso dinamico de los datos se hará vía los "Models" indicando como se guardarán en la BD... Models/User.php
	protected function name():Attribute{
			return new Attribute(
				set:function($value){ return strtolower($value); }
			);
		}
 +++++++++++++++++++++++++++++++++++
[ Formateo de datos / Mutador / Estilos 00 ]
	//Lo siguiguiente es un ejemplo de mutador que permite la obteción y guardado de datos con alteración de iniciale, así como el uso de la función "Flecha", que permite otimizar código...
		//get: function($value){ return ucwords($value); }
		get: fn($value)=> ucwords($value),
			//set:function($value){ return strtolower($value); }
			set: fn($value)=> strtolower($value)
	+++++++++++++++++++++++++++++++++++++++++++++++
	Para ir aplicando estilos de forma dinamica hay que tener instalado:
	Node.JS -> https://nodejs.org/en
	Y Tailwind -> https://tailwindcss.com/docs/guides/laravel

	npm install -D tailwindcss postcss autoprefixer
	npx tailwindcss init -p

[ Lenguaje, mensajes de validación ]++++++++++++++++++++++++++++++
	Para los avisos de mensajes de validación se obtienen de ...
	https://github.com/Laraveles/spanish/tree/master/resources/lang/es

	En el video estaban en la ruta:
		[www]/resources/lang/es/
	Pero en el caso de nuestra instalación estaban en:
		[www]\vendor\laravel\framework\src\Illuminate\Translation\lang\es

[Eliminación de Registros en la BD]
	Se pueden eliminar cosas de la BD tomando en cuenta que hay que crear la ruta de operación, el metodo en el controlador, así como el formulario de operación en el BLADE correspondiente...
		* En web
			Route::delete('/cursos/{curso}', 'destroy')->name('cursos.destroy');
		* En controller
			public function destroy(Curso $curso)
			{ //Se crea el metodo para eliminación de registros...
				$curso->delete();
				return redirect()->route(('cursos.index'));
			}
		* Y el Blade Form:
			<form action="{{route('cursos.destroy', $curso)}}" method="POST">
				@csrf @method('delete')
		[Nota]: el @csrf viene de "Cross-site request forgeries", la cual es una directiva de seguridad que previene que se ejecuten exploits de seguridad que pudieran afectar los datos del sitio...

[Para revisar rutas activas]
	php artisan r:l
	//Ayuda a revisar el estado de rutas del proyecto, aún si estas se gestionaron con "resources"

	//Para distinguir la ruta en la que estamos directamente desde el link, se puede hacer lo siguiente
		<li><a href="{{route('home')}}" class="{{ request()->routeIs('home') ? 'active': ''}}">Home</a>
            <!--?php dump(request()->routeIs('home')); ?-->
            @dump(request()->routeIs('home'))
        </li>

		En donde el "?" indica que la sentencia previa de "request()->routeIs('home')" (que arroja un TRUE/FALSE según sea el caso) forma parte de un IF y lo que está despues del ":" es la condicionante de ELSE...
		Si fuera código completo seria de la sigiente forma...
			if(request()->routeIs('home'))
				{ echo "'active'"; }
			else{ echo "''"; }
		---
[Envio de correo]
	Nota: se pueden usar el proveedor https://mailtrap.io/home
		Para pruebas de envio de correo controladas...
	
	Los datos de envio, para que no se suban a servidor y estén bien configurados se toman de /config/mail.php
	Pero este a su ves lo toma del archivo oculto ".env"

	Una vez hechas las configuraciones pertinentes, se procede a crear una script de envio...
		php artisan make:mail ContactanosMailable
	
[ Estilos con Laravel -> Jetstream + Livewire ]
	Laravel Jetstream is a beautifully designed application starter kit for Laravel and provides the perfect starting point for your next Laravel application. Jetstream provides the implementation for your application's login, registration, email verification, two-factor authentication, session management, API via Laravel Sanctum, and optional team management features.

	Se puede usar de 2 formas, una de ellas es "Livewire+Blade" y la otra es "Inertia+Vue"
		Livewire+Blade : Aprovecha las caracteristicas de los propios BLADE de Laravel+Php
		Inertia+Vue : Es un lenguaje de plantillas que se aprovecha de una libreria de Javscript(Vue.js) pero cambiando el control de enrutamiento con Vue...
	[Nota] : En este proyecto se usará Livewire+Blade

	Instalación:
		En proyecto NUEVO:
			$ laravel new PROJECT-NAME --jet
			//Ya que usa algunas tablas propias, hacer...
			$ php artisan migrate
			//Para que añada las tablas al proyecto...
		Si se desea usar en un proyecto YA INICIADO:
			//Para descargar la libreria
			$ composer require laravel/jetstream
			//Se tiene que escoger si sera:
				>>*Livewire+Blade (DarkMode)
					php artisan jetstream:install livewire --teams --dark
				>>Inertia+Vue
					php artisan jetstream:install inertia --teams
			//Para finalizar(require nodejs)...
				>>En Curso
					npm install && npm run dev
				>>En Jetstream page...
					npm install
					npm run build
					php artisan migrate
# 20240208
	[NOTA]: El curso recomienda hacer todo esto en un NUEVO-PROYECTO, por lo que se dejará este proyecto "Terminado" en la rama "455ee52 (HEAD -> cl10-c23-20240208)" hasta el último commit-log
		* Fin de c26: Como crear un formulario de Contacto, p/Correo
# 20230209
	Se inicio proce4so de actualización de laravel 10, con jetstream y tailwindcss, pero no cargaron correctamente las hojas de estilo...
	Se detectaron muchos errores, los cuales se han ido solventando poco a poco...
	Para crear un componente se usa el siguiente comando...
		$ php artisan make:component Alert
# 20240214 COMPONENTES DE CLASE
	Para inicializar las rutas de "tailwindcss.config.js"
	En "export defailt{content:[
		//Se añaden extras...
        "./resources/**/*.blade.php",
        "./resources/**/*.js",
        "./resources/**/**.vue",
	] ...}"

	Tambien a la hora de integrar la hoja de estilos, hay que hacerlo con @vite()
	En lugar de "link rel", como lo indica el curso...
		<!-- Styles -->
			@vite('resources/css/app.css')
			<!--link rel="stylesheet" href="{{ asset('css/app.css') }}"-->
		<!-- Styles -->
	Ademas hay que tener en consideración correr comando(es una variante de "npm run dev"):
		npm run watch
	Si no existe ese comando disponible en el proyecto se puede agregar así ...
	[En package.json], en la sección de scripts, agregar...
		"scripts": {
			"dev": "vite",
			"build": "vite build",
			"watch": "vite build --watch"
		}
	Esta solución se obtuvo del siguiente link: https://www.youtube.com/watch?v=LJRFZpuzhu0

	[Componentes ANONIMOS]
		Se puede usara componentes dinamicos para presentar la inforamción de una forma u otra según sea el caso...
		<x-dynamic-component :component="$alert">
	[Personalización de plantilla...]
		En "app.blade.php", se encuentra toda la inforamción necesaria para personlaizar el proyecto, cosas como:
			* Lenguaje: <html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
			* Titulo: <title>{{ config('app.name', 'BlogJet') }}</title>
			* inforamción sobre los estilos: @vite(['resources/css/app.css', 'resources/js/app.js'])
	[Nota]: En "app.blade.php"
		@livewire('navigation-dropdown') //Según el curso
		@livewire('navigation-menu') //Según la nueva interfaz actualizada...

		También el componente "x-nav-link", posee inforamción que se encuentra en nav-link.balde.php, todo eso para control de menú de navegación...

	[Nota2]: Para un cambio de logo o actualización de cualquier componente, es adecuado actualizar las libraries dentro de la carpeta de "resources", para hacerlo de la mejor manera, lo correcto es ...
		$ php artisan vendor:publish --tag-jetstream-views
		//Aparentemente en la versión actual ya no es necesario...
# 20240220 Laravel AHORA USA VITE + Middlewares
	[VITE]
		* Este es un extracto extra para optimizar el funcionamiento del uso de plantillas de estilos con LARAVEL, se usa de referencia el video:
			[28 - Laravel ahora usa Vite ¿Que ocurrió con Webpack?]
				* https://www.youtube.com/watch?v=4gxxWTe3pVA&list=PLZ2ovOgdI-kWWS9aq8mfUDkJRfYib-SvF&index=34
		
		En el se expresa que se dejó de usar Webpack porque no era optimo su proces de carga de estilos, ya que recargaba todos los CSS del sitio con un minimo cambio...
			Desde el script app.blade.php, se puede tomar la siguiente ruta de estilos...
				@vite(['resources/css/app.css', 'resources/js/app.js'])
		* Notas para producción:
			N1: Cuando un pryecto de laravel+vite se sube a producción, hay que tener los assets/archivos ya compilados/empaquetados...
			Para eso hay que correr antes el comando:
				$  npm run build
			Con eso se generará el archivo "public/build/manifest.json" el cual contiene todos los CSS listos para operar en producción...
			N2: Se puede dar el caso que se tenga un servidor de producción que ya tenga en consideración la compilación de los paquetes al momento de subirlos, pero no suele ser lo normal, preguntar si ese es el caso, ya que normalmente la ruta:
				/public/build/
			Suele ser ignorada en las reglas de carga de ".gitignore"
	[Middlewares]
		* Un middleware es un intermediario para validar las capacidades de acceso de un usuario a un contenido en especifico, la forma correcta de crear uno es de la siguiente forma ...
			$ php artisan make:middleware CheckAge
			Eso crea un archivo en la siguiente ruta...
			/app/Http/Middleware/CheckAge.php
		* Si ya se creo un middleware hay que registrarlo en el script de "/app/Http/Kernel.php", en la sección de $routeMiddleware
			'age' => \App\Http\Middleware\CheckAge::class,
	[ Diseño de Base de DATOS ]
	* c32 Diseño de Base de Datos...
		Para este ejercicio del curso se tomará en cuenta lo siguiente...
		"Reglas de negocio1":
			1.- Los usuarios de la página pueden registrarse y hacer login
				La información de los usuarios que necesitamos almacenar, son nombre, correo y dirección
			2.- Va a haber usuarios que van a tener el perfil de creadores. En el perfil de creadores debemos almacenar, titulo, biografia y website
			3.- Los creadores pueden escribir uno o más post
			4.- Los POST deben tener portada, titulo, descripción, categoria y pueden tener uno o más etiquetas
			5.- Los post vana poder ser comentados por los usuarios
			#.- s:\Documentos\DevProyects\Laravel_Notes\c32_Modelo.png
	* c33 Diseño de Base de datos(MODELO LÓGICO)
		"Reglas de negocio2":
			1.- Los usuarios van a poder registrarse en la plataforma y necesitamos almacenar su nombre, email y direccion
			2.- La plataforma nos debe permitir poder asignar un rol a los usuarios registrados
			3.- Los Usuarios con un rol, deben poder guardar información sobre su biografia, título y website en un perfil para creadores
			4.- Los usuarios con el Rol de editor van a poder escribir post
			5.- La información que debemos almacenar sobre los post es categoria, título, body, y uno o más etiquetas
			6.- Los post van a poder ser comentados y debemos poder almacenar el mensaje, así como el nombre de la persona que lo escribio
			7.- Las personas con el rol de player van a poder subir videos
			8.- Lo que debemos almacenar del vídeo es el título del vídeo, descripción, la URL donde está almacenada y en etiquetas las cuales pueden ser uno o más
			9.- Los videos van poder ser comentados y debemos poder almacenar tanto el mensaje como el nombre de la persona que lo escribió
			10.- Las etiquetas que se utilicen tanto para los post como para los videos, deben sacarlo de una lista de etiquetas ya definidas
			11.- El usuario de poder subir una imagen como foto de perfil de manera opcional
			12.- Se puede subir una imagen de portada de manera opcional
			#.- Diagrama en:
				s:\Documentos\DevProyects\Laravel_Notes\c33_Modelo_Pt1.png
				s:\Documentos\DevProyects\Laravel_Notes\c33_Modelo_Pt2.png

		[Nt1]: Se recomienda usar DIA(Programa para generar diagramas), para realizar un primer borrador con el cual pasar al proceso de maquetado.
			Ya hecho el borrador, lo preferible es crear la estructura de Base de Datos con MySQL Workbench
		[Nt2]: En el caso de generación de relaciones 1:1 ó 1:n, donde se use de referencia una llave ID dentro de otra tabla, se recomienda que su nomenclatura sea singular dentro de la tabla, para seguir las convenciones de LARAVEL
		[Nt3]: Se pueden generar tablas multirelacionales pero la convención de LARAVEL es que se use el nombre de tabla 
			TABLE-NM."able", por ejemplo:
				"Queso" = Queseable
				"Imagen" = Imageable
				"Gato" = Gateable
			#Generando con esto campos como:
				Queseable, con las columnas "Queseableable_id" y "Queseableable_type"
				Imageable, con las columnas "Imageableable_id" y "Imageableable_type"
				Gateable, con las columnas "Gateableable_id" y "Gateableable_type"
		[Nt4]: En estos últimos casos se pueden usar PK(Primary-Key) compuestas que permitan evitar confuciones en el proceso de generación de registros ÚNICOS

		En este ejercicio, se aplicaron estas 2 últimas indicaciones en las tablas "images" y "comments" quedando de la siguiente forma:
			s:\Documentos\DevProyects\Laravel_Notes\c33_Modelo_SQL-Workbench.png
	* c34 Normalización de Base de datos
		1era Forma Normal : Si se cuenta con un campo compuesto, lo correcto es añadir segmentos adicionales de esos valores compuestos, ejemplo:
			Dirección:
				* calle
				* numero
				* colonia/distrito
				* ciudad
		2da Forma Normal : Debe de existir una dependencia funcional completa con respecto a su llave primaria
			Si el contenido de una tabla depende de otra tabla, lo ideal es que se use su ID
		3ra Forma Normal : No debe de existir una dependencia funcional transitiva con respecto a una clave primaria
			Si el contenido de la tabla no es dependiente de ella directamente, se tendria que crear una tabla adicional, con su respectiva relación de IDs
	
	* c36 Relación  uno a muchos
		[Nota]: En el "c35 Relación uno a uno", se indicarón algunos pasos para unir un una tabla con otra, esto se puede ver en los archivos:
			app/Models/Profile.php
			app/Models/User.php
			database/migrations/2024_02_27_030658_create_profiles_table.php

			Por ejemplo...
			//Para agregar un PK externo se tiene que indicar claramente el MISMO tipo que el PK origen en el destino y que es ÚNICO...
                    $table->unsignedBigInteger('user_id')->unique();
                    $table->foreign('user_id')->references('id')->on('users')
                        ->onDelete('cascade') //Si se indica "cascade" es para que si se ELIMINA uno tambien se borreo el otro
                        ->onUpdate('cascade'); //Si se indica "cascade" es para que si se MODIFICA uno tambien se borreo el otro
		
		Para continuar se puede simplificar el proceso de crear modelo/migración/seed/factory
			$ php artisan make:model Categoria -mcsf
		 ó	$ php artisan make:model Categoria -a
		En donde "model" crea por defecto el archivo del modelo, pero los sufijos, hacen lo siguiente:
			-m , Es para crear la migración
			-c , Es para crear el controlador
			-s , Es para crear el seeder
			-f , Es para crear el factory 
			-a , Es para crear todas las anteriores

		[Nota]: Ejemplos de la declaración en los MODELOS de los tipos de relaciones
			    //Relación 1:N, Uno a muchos
				public function posts(){ //Un usuario puede tener varios post
					return $this->hasMany('App\Models\Post');
				}
				//Relación N:1, Muchos a Uno
				public function post(){ //Muchos post pueden pertenecer a un usuario
					return $this->belongsTo('App\Models\User');
				}
				//Relación N:N, Muchos a muchos...
				public function roles(){ //Muchos usuarios pueden poser varios roles
					return $this->belongsToMany('App\Models\Role');
				}
	* c37 Relaciones muchos a muchos, (Many To Many), N:N
		Una vez creadas las tavlas y modelos se pueden agregar o quietar roles desde thinker con el comando "Attach"
		  $ php artisan tinker
		  	>use App\Models\User;
			> $user = User::find(1);
			> $user->roles()->attach(1);
			# Se pueden usar arreglos
			> $user->roles()->attach([1,2,3]);
		# Para quitarle los roles se usa "detach"
			> $user = User::find(2);
			> $user->roles()->attach(2);
		# Para QUITAR TODOS los vinculos(roles) previos y crear nuevos se usa "sync"
			> $user->roles()->sync([1,2]);

		[Nota]: Cuado se crean migraciones, la nomenclatura de la misma tiene que ser clara, pero es preferibel que sigan un orden alfabetico, por ejemplo:
			$ php artisan make:migration create_permiso_role_table
			# En donde la "C" va antes que la "P" esta va antes que la "R"
	* c38 Relación Uno a Uno, POLIMORFICA
		Para este caso se está considerando una tabla de IMAGENES indistinta en la que estarán todas las imagenes de la BD, ya sean de usuarios o de post...

		Para este caso se creará una tabal con relaciones polimirficas con la siguiente distribución, donde el identificador será un PK-Compuesto:
			[ imageable ]
			| url  | imageable_id  | imageable_type |
			| url1 | 1				| App\Model\User |
			| url2 | 2				| App\Model\User |
			| url3 | 1				| App\Model\User |
			| url4 | 2				| App\Model\User |
			| url4 | 3				| App\Model\User |
			| url4 | 4				| App\Model\User |
		
		Para lograr esto al momento de crear la tabla en la migración se indica una PK-compuesta así:
			Schema::create('images', function (Blueprint $table) {
				//Se añaden los campos necesarios
					$table->string('url');
					$table->unsignedBigInteger('imageable_id');
					$table->unsignedBigInteger('imageable_type');
					$table->primary('imageable', 'imageable_type');
				$table->timestamps();
			});

		// Si ya se creó la migración, se puede indicar en el modelo el polimorfismo de la siguiente forma ...
			public function imageable(){
				return $this->morphTo();
			}

		//Ejemplo de insersión de datos vía TINKER
			$ php artisan tinker
			> use App\Models\Image;
			> Image::create(['url'=>'url 1', 'imageable_id'=>1, 'imageable_type'=>'App\Models\User']);
			# ASi se ve una inserción correcta de datos...
			= App\Models\Image {#5331
				url: "url 1",
				imageable_id: 1,
				imageable_type: "App\Models\User",
				updated_at: "2024-03-01 00:26:23",
				created_at: "2024-03-01 00:26:23",
				id: 0,
			}

		// Para conprobar que se hizo bien la inserción se puede hacer de la siguiente manera...
			# Se delcara el uso del MODELO
			 use App\Models\User;
			# Se indica el ID del usuario que se está buscando...
			 > $user=User::find(1);
				= App\Models\User {#6065 ...}
			# Ya indentificado se procede a verificar su relación 
			 > $user->image;
			 = App\Models\Image {#5361 ...}
			# Y se puede ver incluso el tipo de relación de Eloquent...
			 > $user->image();
			 = Illuminate\Database\Eloquent\Relations\MorphOne {#5345}

		//Si ya se tiene identificado el usuario, se le puede madar a crear la iamgen directo desde el ...
			> $user=User::find(1);
			= App\Models\User {#6337 ...}
			> $user->image()->create(['url'=>'url 1']);
			= App\Models\Image {#6335 
				url: "url 1",
				imageable_id: 1,
				imageable_type: "App\Models\User",
				updated_at: "2024-03-01 00:41:08",
				created_at: "2024-03-01 00:41:08",
				id: 0,
			}
	* c39 Relación Uno a Muchos, POLIMORFICA
		Similar al caso anterior en el que hay imagenes para más de un contexto, se puede usar la misma lógica para el caso de los comentarios, en los cuales se puede hace una tabla con PK-Compuesta, pero para los casos de comentarioa de POST o de comentarios de Video o cualquier otro nuevo contenido...
			[ commentable ]
			| id | mensaje   | commentable_id  | commentable_type |
			| 1  |comentario1| 1				| App\Model\Post |
			| 2  |comentario2| 2				| App\Model\Post |
			| 3  |comentario3| 3				| App\Model\Post |
			| 4  |comentario4| 1				| App\Model\Post |
			| 5  |comentario4| 1				| App\Model\Video|
			| 6  |comentario4| 2				| App\Model\Video|
			| 7  |comentario4| 3				| App\Model\Video|
			| 8  |comentario4| 1				| App\Model\Video|

			Img Ref s:\Documentos\DevProyects\Laravel_Notes\c40_Rel_MuchosAMuchos_POLIMORFICA.png
		
		// Similar al caso anterior hay que indicar en el modelo que es una tabla POLIMORFICA
			//Esta es una tabla polimorfica...
			public function commentable(){
				return $this->morphTo();
			}
	* c40 Relación N:N, Muchos a Muchos POLIMORFICA
		Para este caso tenemos un caso de una tabla de TAGS que de forma dinamica podria tener datos de más de una tabla extra, por lo que se añada esta distribución... 
			[ taggeable ]
			| taggeable_id  | taggeable_type  | tag_id |
			| 1				| App\Models\Post | 1 |
			| 1				| App\Models\Post | 1 |
			| 2				| App\Models\Post | 2 |
			| 3				| App\Models\Post | 3 |
			| 1				| App\Models\Video| 1 |
			| 1				| App\Models\Video| 1 |
			| 2				| App\Models\Video| 2 |
			| 3				| App\Models\Video| 3 |

		# Para esto en los modelos de Post y video se usa...
			//Relacion N:N, Muchos a Muchos POLIMORFICA
			public function posts(){
				return $this->morphMany('App\Models\Taggable', 'taggable');
			}
		# Y en el modelo TAG se indica de la siguiente manera...
		//Relacion N:N, Muchos a Muchos POLIMORFICA, INVERSA
			public function posts(){
				return $this->morphedByMany('App\Models\Post', 'taggable');
			}
			public function videos(){
				return $this->morphedByMany('App\Models\Video', 'taggable');
			}

[Notas Finales]

Con estas últimas notas termina el curoso de laravel que comenzó en :
	c1 : https://www.youtube.com/watch?v=3e1IsZJuYAw&list=PLZ2ovOgdI-kWWS9aq8mfUDkJRfYib-SvF&index=1
	y concluyo en ...
	c40 : https://www.youtube.com/watch?v=iHqIFcVeC7A&list=PLZ2ovOgdI-kWWS9aq8mfUDkJRfYib-SvF&index=45
		
Las notas de este curso proyecto terminarán Aqui, pero por se seguiran creando nuevos proyectos ...
Se deja una diagrama final del resultado de las relaciones del proyecto ...
	ImgRef s:\Documentos\DevProyects\Laravel_Notes\c40_Rel_MuchosAMuchos_POLIMORFICA_Final.png


		

